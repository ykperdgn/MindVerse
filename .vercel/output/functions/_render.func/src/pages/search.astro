---
// Gelişmiş site içi arama sayfası
import Layout from '../components/Layout.astro';
import { getCollection } from 'astro:content';

// Tüm içerikleri topla
const categories = ['health', 'love', 'history', 'psychology', 'space', 'quotes'];
const allPosts = [];

for (const category of categories) {
  const posts = await getCollection(category);
  allPosts.push(...posts.map(post => ({
    ...post,
    category,
    url: `/${category}/${post.slug}`
  })));
}

// JSON formatında arama verileri
const searchData = allPosts.map(post => ({
  title: post.data.title,
  summary: post.data.summary,
  content: post.body || '',
  category: post.category,
  tags: post.data.tags || [],
  url: post.url,
  views: post.data.views || 0,
  date: post.data.date
}));
---

<Layout
  title="Site İçi Arama - MindVerse"
  description="MindVerse'te aradığınız konularda detaylı makaleler bulun. Sağlık, aşk, tarih, psikoloji, uzay ve alıntılar kategorilerinde arama yapın."
  keywords="arama, makale, sağlık, aşk, tarih, psikoloji, uzay, alıntılar"
>
  <div class="container mx-auto px-4 py-8">
    <!-- Arama Başlığı -->
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">🔍 Site İçi Arama</h1>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Aradığınız konuda detaylı makaleler bulun. 6 farklı kategoride
        {allPosts.length} makale içinden arama yapabilirsiniz.
      </p>
    </div>

    <!-- Arama Kutusu -->
    <div class="max-w-4xl mx-auto mb-8">
      <div class="relative">
        <input
          type="text"
          id="search-input"
          placeholder="Arama yapmak istediğiniz konuyu yazın... (örn: stres yönetimi)"
          class="w-full px-6 py-4 text-lg border-2 border-gray-300 rounded-xl focus:border-blue-500 focus:outline-none"
          autocomplete="off"
        />
        <div class="absolute right-4 top-1/2 transform -translate-y-1/2">
          <span class="text-gray-400 text-xl">🔍</span>
        </div>
      </div>

      <!-- Arama Filtreleri -->
      <div class="flex flex-wrap gap-3 mt-4 justify-center">
        <button class="filter-btn active" data-category="all">
          🌟 Tümü ({allPosts.length})
        </button>
        <button class="filter-btn" data-category="health">
          💚 Sağlık
        </button>
        <button class="filter-btn" data-category="love">
          ❤️ Aşk
        </button>
        <button class="filter-btn" data-category="history">
          📚 Tarih
        </button>
        <button class="filter-btn" data-category="psychology">
          🧠 Psikoloji
        </button>
        <button class="filter-btn" data-category="space">
          🚀 Uzay
        </button>
        <button class="filter-btn" data-category="quotes">
          💭 Alıntılar
        </button>
      </div>
    </div>

    <!-- Arama Sonuçları -->
    <div id="search-results" class="max-w-6xl mx-auto">
      <!-- Başlangıçta popüler makaleler göster -->
      <div id="initial-content">
        <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">🔥 Popüler Makaleler</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {allPosts
            .sort((a, b) => (b.data.views || 0) - (a.data.views || 0))
            .slice(0, 6)
            .map(post => (
              <article class="bg-white border border-gray-200 rounded-lg hover:shadow-lg transition-shadow p-4">
                <div class="flex items-center mb-3">
                  <span class={`px-2 py-1 rounded-full text-xs font-medium ${
                    post.category === 'health' ? 'bg-green-100 text-green-800' :
                    post.category === 'love' ? 'bg-red-100 text-red-800' :
                    post.category === 'history' ? 'bg-yellow-100 text-yellow-800' :
                    post.category === 'psychology' ? 'bg-purple-100 text-purple-800' :
                    post.category === 'space' ? 'bg-blue-100 text-blue-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {post.category === 'health' ? '💚 Sağlık' :
                     post.category === 'love' ? '❤️ Aşk' :
                     post.category === 'history' ? '📚 Tarih' :
                     post.category === 'psychology' ? '🧠 Psikoloji' :
                     post.category === 'space' ? '🚀 Uzay' :
                     '💭 Alıntılar'}
                  </span>
                  <span class="ml-auto text-xs text-gray-500">
                    👁️ {(post.data.views || 0).toLocaleString('tr-TR')}
                  </span>
                </div>

                <h3 class="font-semibold text-gray-900 mb-2 line-clamp-2">
                  <a href={post.url} class="hover:text-blue-600 transition-colors">
                    {post.data.title}
                  </a>
                </h3>

                <p class="text-gray-600 text-sm mb-3 line-clamp-2">
                  {post.data.summary}
                </p>

                <div class="flex flex-wrap gap-1 mb-3">
                  {post.data.tags?.slice(0, 3).map(tag => (
                    <span class="bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded">
                      #{tag}
                    </span>
                  ))}
                </div>

                <a
                  href={post.url}
                  class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium text-sm"
                >
                  📖 Devamını Oku →
                </a>
              </article>
            ))
          }
        </div>
      </div>

      <!-- Arama sonuçları (JavaScript ile doldurulacak) -->
      <div id="search-content" class="hidden">
        <div id="search-header" class="mb-6"></div>
        <div id="search-items" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
        <div id="no-results" class="hidden text-center py-12">
          <span class="text-6xl mb-4 block">🔍</span>
          <h3 class="text-xl font-semibold text-gray-700 mb-2">Sonuç Bulunamadı</h3>
          <p class="text-gray-500 mb-4">Aradığınız terime uygun makale bulunamadı.</p>
          <button onclick="clearSearch()" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            Aramayı Temizle
          </button>
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ searchData }}>
    let currentFilter = 'all';
    let searchTerm = '';

    // Arama verilerini hazırla
    const allArticles = searchData;

    // Arama fonksiyonu
    function performSearch(query, category = 'all') {
      if (!query.trim()) {
        showInitialContent();
        return;
      }

      searchTerm = query.toLowerCase();
      currentFilter = category;

      // Kategori filtreleme
      let filteredArticles = category === 'all'
        ? allArticles
        : allArticles.filter(article => article.category === category);

      // Arama skoru hesaplama
      const results = filteredArticles.map(article => {
        let score = 0;
        const searchWords = searchTerm.split(' ').filter(word => word.length > 1);

        searchWords.forEach(word => {
          // Başlıkta geçerse yüksek skor
          if (article.title.toLowerCase().includes(word)) score += 10;

          // Özette geçerse orta skor
          if (article.summary.toLowerCase().includes(word)) score += 5;

          // Etiketlerde geçerse orta skor
          article.tags.forEach(tag => {
            if (tag.toLowerCase().includes(word)) score += 5;
          });

          // İçerikte geçerse düşük skor
          if (article.content.toLowerCase().includes(word)) score += 2;
        });

        return { ...article, score };
      })
      .filter(article => article.score > 0)
      .sort((a, b) => b.score - a.score);

      showSearchResults(results, query, category);
    }

    // Arama sonuçlarını göster
    function showSearchResults(results, query, category) {
      document.getElementById('initial-content').classList.add('hidden');
      document.getElementById('search-content').classList.remove('hidden');

      const header = document.getElementById('search-header');
      const items = document.getElementById('search-items');
      const noResults = document.getElementById('no-results');

      if (results.length === 0) {
        header.innerHTML = '';
        items.innerHTML = '';
        noResults.classList.remove('hidden');
        return;
      }

      noResults.classList.add('hidden');

      // Başlık
      const categoryText = category === 'all' ? 'Tüm Kategorilerde' : getCategoryName(category);
      header.innerHTML = `
        <h2 class="text-2xl font-bold text-gray-800 text-center">
          "${query}" için ${categoryText} ${results.length} sonuç bulundu
        </h2>
      `;

      // Sonuçlar
      items.innerHTML = results.map(article => `
        <article class="bg-white border border-gray-200 rounded-lg hover:shadow-lg transition-shadow p-4">
          <div class="flex items-center mb-3">
            <span class="px-2 py-1 rounded-full text-xs font-medium ${getCategoryClass(article.category)}">
              ${getCategoryIcon(article.category)} ${getCategoryName(article.category)}
            </span>
            <span class="ml-auto text-xs text-gray-500">
              👁️ ${article.views.toLocaleString('tr-TR')}
            </span>
          </div>

          <h3 class="font-semibold text-gray-900 mb-2 line-clamp-2">
            <a href="${article.url}" class="hover:text-blue-600 transition-colors">
              ${highlightText(article.title, query)}
            </a>
          </h3>

          <p class="text-gray-600 text-sm mb-3 line-clamp-2">
            ${highlightText(article.summary, query)}
          </p>

          <div class="flex flex-wrap gap-1 mb-3">
            ${article.tags.slice(0, 3).map(tag =>
              `<span class="bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded">#${tag}</span>`
            ).join('')}
          </div>

          <a href="${article.url}" class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium text-sm">
            📖 Devamını Oku →
          </a>
        </article>
      `).join('');
    }

    // İlk içeriği göster
    function showInitialContent() {
      document.getElementById('search-content').classList.add('hidden');
      document.getElementById('initial-content').classList.remove('hidden');
    }

    // Aramayı temizle
    function clearSearch() {
      document.getElementById('search-input').value = '';
      showInitialContent();
      updateFilterButtons('all');
    }

    // Metin vurgulama
    function highlightText(text, query) {
      if (!query.trim()) return text;

      const words = query.split(' ').filter(word => word.length > 1);
      let highlightedText = text;

      words.forEach(word => {
        const regex = new RegExp(`(${word})`, 'gi');
        highlightedText = highlightedText.replace(regex, '<mark class="bg-yellow-200">$1</mark>');
      });

      return highlightedText;
    }

    // Kategori helper fonksiyonlar
    function getCategoryName(category) {
      const names = {
        health: 'Sağlık',
        love: 'Aşk',
        history: 'Tarih',
        psychology: 'Psikoloji',
        space: 'Uzay',
        quotes: 'Alıntılar'
      };
      return names[category] || category;
    }

    function getCategoryIcon(category) {
      const icons = {
        health: '💚',
        love: '❤️',
        history: '📚',
        psychology: '🧠',
        space: '🚀',
        quotes: '💭'
      };
      return icons[category] || '📄';
    }

    function getCategoryClass(category) {
      const classes = {
        health: 'bg-green-100 text-green-800',
        love: 'bg-red-100 text-red-800',
        history: 'bg-yellow-100 text-yellow-800',
        psychology: 'bg-purple-100 text-purple-800',
        space: 'bg-blue-100 text-blue-800',
        quotes: 'bg-gray-100 text-gray-800'
      };
      return classes[category] || 'bg-gray-100 text-gray-800';
    }

    // Filtre butonlarını güncelle
    function updateFilterButtons(activeCategory) {
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.category === activeCategory) {
          btn.classList.add('active');
        }
      });
    }

    // Event listener'lar
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.getElementById('search-input');

      // Arama input eventi
      searchInput.addEventListener('input', function() {
        const query = this.value;
        if (query.length >= 2 || query.length === 0) {
          performSearch(query, currentFilter);
        }
      });

      // Enter tuşu
      searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          performSearch(this.value, currentFilter);
        }
      });

      // Filtre butonları
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const category = this.dataset.category;
          currentFilter = category;
          updateFilterButtons(category);

          const query = searchInput.value;
          if (query.trim()) {
            performSearch(query, category);
          }
        });
      });

      // URL'den arama parametresi al
      const urlParams = new URLSearchParams(window.location.search);
      const searchQuery = urlParams.get('q');
      if (searchQuery) {
        searchInput.value = searchQuery;
        performSearch(searchQuery, 'all');
      }
    });
  </script>

  <style>
    .filter-btn {
      @apply px-4 py-2 rounded-full border border-gray-300 text-gray-700 hover:border-blue-500 hover:text-blue-600 transition-colors;
    }

    .filter-btn.active {
      @apply bg-blue-600 text-white border-blue-600;
    }

    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>
</Layout>
